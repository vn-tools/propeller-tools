#!/usr/bin/python3
import os
import struct
import sys
import types

import open_ext

Entry = types.SimpleNamespace

def decompress(input, size_uncompressed):
    output = bytearray()

    i = 0
    while i < len(input) and len(output) < size_uncompressed:
        c = input[i]
        i += 1

        if c < 0x20:
            length = c + 1
            output.extend(input[i:i+length])
            i += length
        else:
            length = c >> 5
            if length == 0b111:
                length += input[i]
                i += 1
            length += 2

            look_behind = (c & 0b00011111) << 8
            look_behind += input[i]
            look_behind += 1
            i += 1

            for j in range(length):
                output.append(output[-look_behind])

    return output

def compress(input):
    #since I see no benefits in struggling to implement anything better,
    #the algorithm is simplified to mere RLE
    output = bytearray()

    def flush_buffer(buffer, output):
        while buffer:
            length = min(0x20, len(buffer))
            output.append(length - 1)
            output.extend(buffer[0:length])
            buffer[0:length] = []

    i = 0
    buffer = bytearray()
    while i < len(input):
        c = input[i]
        repetition_length = 1
        for j in range(i + 1, len(input)):
            if input[j] != c:
                break
            repetition_length += 1
            if repetition_length >= 255 + 0b111:
                break
        i += repetition_length

        if repetition_length > 3: #2+1 for the extra byte pushed for look behind
            look_behind = 1
            buffer.append(c)
            repetition_length -= 1
            flush_buffer(buffer, output)

            assert repetition_length < 0b0000011111111111
            assert look_behind < 0b0001111111111111
            look_behind -= 1
            look_behind_hi = look_behind >> 8
            look_behind_lo = look_behind

            repetition_length -= 2
            if repetition_length >= 0b111:
                output.append(0b111 << 5 | look_behind_hi)
                output.append(repetition_length - 0b111)
            else:
                output.append(repetition_length << 5 | look_behind_hi)
            output.append(look_behind_lo)
        else:
            buffer.extend([c] * repetition_length)
    flush_buffer(buffer, output)

    return output

def unpack_mgr(src_path, dst_dir):
    os.makedirs(dst_dir, exist_ok=True)

    with open_ext.open_ext(src_path, 'rb') as src_fh:
        entry_count = src_fh.read_u16_le()
        offsets = []

        if entry_count == 1:
            offsets.append(src_fh.tell())
        else:
            for _ in range(entry_count):
                offsets.append(src_fh.read_u32_le())

        for i, offset in enumerate(offsets):
            src_fh.seek(offset)
            size_original = src_fh.read_u32_le()
            size_compressed = src_fh.read_u32_le()
            buffer = src_fh.read(size_compressed)
            buffer = decompress(buffer, size_original)
            target_path = os.path.join(dst_dir, '%04d.bmp' % i)
            with open(target_path, 'wb') as dst_fh:
                dst_fh.write(buffer)

def pack_mgr(src_dir, dst_path):
    entries = []
    for root, dirs, files in os.walk(src_dir):
        for file in sorted(files):
            path = os.path.join(root, file)
            with open(path, 'rb') as src_fh:
                content = src_fh.read()
            entry = Entry(
                compressed_data = compress(content),
                size_original = len(content),
                offset = 0)
            entries.append(entry)

    #calculate offsets
    current_offset = 2
    if len(entries) > 1:
        current_offset += len(entries) * 4
    for entry in entries:
        entry.offset = current_offset
        current_offset += len(entry.compressed_data) + 8

    #dump entries to mgr file
    with open_ext.open_ext(dst_path, 'wb') as dst_fh:
        dst_fh.write_u16_le(len(entries))
        if len(entries) > 1:
            for entry in entries:
                dst_fh.write_u32_le(entry.offset)

        for entry in entries:
            assert dst_fh.tell() == entry.offset
            dst_fh.write_u32_le(entry.size_original)
            dst_fh.write_u32_le(len(entry.compressed_data))
            dst_fh.write(entry.compressed_data)

def parse_args():
    import argparse
    parser = argparse.ArgumentParser(description='Pack or unpack MGR image containers')
    parser.add_argument('input', metavar='INPUT')
    parser.add_argument('output', metavar='OUTPUT')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-p', '--pack', action='store_true', help='pack INPUT directory to OUTPUT MGR file')
    group.add_argument('-u', '--unpack', action='store_true', help='unpack INPUT MGR file to OUTPUT directory')
    return parser.parse_args()

def main():
    args = parse_args()
    if args.unpack:
        unpack_mgr(args.input, args.output)
    else:
        pack_mgr(args.input, args.output)

if __name__ == '__main__':
    main()
